#!/usr/bin/env python3
"""
Script para verificar la configuraci√≥n de Google Drive para Streamlit Cloud
Simula el entorno de Streamlit para debugging
"""

import os
import sys
import json
import tempfile
from pathlib import Path

# Simular secrets de Streamlit
class MockSecrets:
    def __init__(self, secrets_file):
        import toml
        with open(secrets_file, 'r') as f:
            self.data = toml.load(f)
    
    def __getitem__(self, key):
        return self.data[key]
    
    def __getattr__(self, key):
        return self.data.get(key, {})

def test_google_drive_connection(secrets_file=".streamlit/secrets.toml"):
    """
    Prueba la conexi√≥n a Google Drive usando las credenciales del secrets.toml
    """
    print("üîç Verificando configuraci√≥n de Google Drive...")
    print("=" * 60)
    
    # 1. Verificar que existe el archivo secrets
    if not os.path.exists(secrets_file):
        print(f"‚ùå Error: No se encontr√≥ {secrets_file}")
        return False
    
    try:
        # 2. Cargar secrets
        secrets = MockSecrets(secrets_file)
        print("‚úÖ Archivo secrets.toml cargado correctamente")
        
        # 3. Verificar estructura de gcp_service_account
        gcp_config = secrets.gcp_service_account
        required_fields = [
            'type', 'project_id', 'private_key_id', 'private_key',
            'client_email', 'client_id', 'auth_uri', 'token_uri'
        ]
        
        missing_fields = []
        for field in required_fields:
            if field not in gcp_config:
                missing_fields.append(field)
        
        if missing_fields:
            print(f"‚ùå Faltan campos en gcp_service_account: {missing_fields}")
            return False
        
        print("‚úÖ Configuraci√≥n gcp_service_account completa")
        
        # 4. Verificar formato del private_key
        private_key = gcp_config['private_key']
        if not private_key.startswith('-----BEGIN PRIVATE KEY-----'):
            print("‚ùå Error: private_key no tiene el formato correcto")
            print("üí° Debe empezar con '-----BEGIN PRIVATE KEY-----'")
            return False
        
        print("‚úÖ Formato de private_key correcto")
        
        # 5. Probar autenticaci√≥n con Google
        try:
            from google.oauth2 import service_account
            from googleapiclient.discovery import build
            
            credentials = service_account.Credentials.from_service_account_info(
                dict(gcp_config),
                scopes=['https://www.googleapis.com/auth/drive.readonly']
            )
            
            service = build('drive', 'v3', credentials=credentials)
            
            # Probar listando archivos (limitado)
            results = service.files().list(pageSize=1).execute()
            print("‚úÖ Autenticaci√≥n con Google Drive exitosa")
            
        except Exception as e:
            print(f"‚ùå Error de autenticaci√≥n: {str(e)}")
            return False
        
        # 6. Verificar IDs de archivos
        drive_files = secrets.drive_files
        required_files = ['casos_excel', 'epizootias_excel']
        
        print("\nüìÇ Verificando archivos requeridos...")
        for file_key in required_files:
            if file_key in drive_files:
                file_id = drive_files[file_key]
                print(f"‚úÖ {file_key}: {file_id}")
                
                # Intentar acceder al archivo
                try:
                    file_info = service.files().get(fileId=file_id).execute()
                    print(f"   üìÑ Nombre: {file_info.get('name', 'Sin nombre')}")
                    print(f"   üìä Tama√±o: {file_info.get('size', 'Desconocido')} bytes")
                except Exception as e:
                    print(f"   ‚ùå Error accediendo al archivo: {str(e)}")
                    return False
            else:
                print(f"‚ùå Falta {file_key} en drive_files")
                return False
        
        # 7. Verificar shapefiles (opcionales)
        shapefile_keys = ['municipios_shp', 'municipios_shx', 'municipios_dbf', 'municipios_prj']
        available_shapefiles = 0
        
        print("\nüó∫Ô∏è Verificando shapefiles (opcionales)...")
        for file_key in shapefile_keys:
            if file_key in drive_files:
                print(f"‚úÖ {file_key}: {drive_files[file_key]}")
                available_shapefiles += 1
            else:
                print(f"‚ö†Ô∏è {file_key}: No configurado")
        
        if available_shapefiles >= 4:
            print("‚úÖ Shapefiles de municipios disponibles")
        else:
            print("‚ö†Ô∏è Shapefiles incompletos - los mapas pueden no funcionar")
        
        print("\n" + "=" * 60)
        print("üéâ ¬°Configuraci√≥n de Google Drive CORRECTA!")
        print("‚úÖ Tu dashboard deber√≠a funcionar en Streamlit Cloud")
        return True
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {str(e)}")
        return False

def fix_common_issues():
    """Muestra soluciones para problemas comunes"""
    print("\nüîß SOLUCIONES PARA PROBLEMAS COMUNES:")
    print("=" * 60)
    
    print("\n1Ô∏è‚É£ **Error 'Invalid JWT Signature':**")
    print("   ‚Ä¢ El private_key est√° mal formateado")
    print("   ‚Ä¢ Ejecuta: python get_private_key.py tu_archivo.json")
    print("   ‚Ä¢ Copia el resultado a secrets.toml")
    
    print("\n2Ô∏è‚É£ **Error 'File not found':**")
    print("   ‚Ä¢ Los IDs de archivos son incorrectos")
    print("   ‚Ä¢ Verifica que los archivos sean p√∫blicos o compartidos")
    print("   ‚Ä¢ Ejecuta: python get_shapefiles_ids.py")
    
    print("\n3Ô∏è‚É£ **Error de permisos:**")
    print("   ‚Ä¢ El service account no tiene acceso")
    print("   ‚Ä¢ Comparte los archivos con el client_email")
    print("   ‚Ä¢ O haz los archivos p√∫blicos")
    
    print("\n4Ô∏è‚É£ **Timeout de descarga:**")
    print("   ‚Ä¢ Los archivos son muy grandes")
    print("   ‚Ä¢ Aumenta download_timeout_seconds en secrets.toml")
    print("   ‚Ä¢ Verifica tu conexi√≥n de red")

def main():
    """Funci√≥n principal"""
    print("üîç Verificador de Configuraci√≥n Google Drive")
    print("Para Dashboard Fiebre Amarilla - Streamlit Cloud")
    print("=" * 60)
    
    # Verificar dependencias
    try:
        import toml
        import google.oauth2.service_account
        import googleapiclient.discovery
    except ImportError as e:
        print(f"‚ùå Falta dependencia: {e}")
        print("üí° Instala con: pip install toml google-auth google-api-python-client")
        sys.exit(1)
    
    # Buscar archivo secrets
    possible_paths = [
        ".streamlit/secrets.toml",
        "secrets.toml",
        "../.streamlit/secrets.toml"
    ]
    
    secrets_file = None
    for path in possible_paths:
        if os.path.exists(path):
            secrets_file = path
            break
    
    if not secrets_file:
        print("‚ùå No se encontr√≥ secrets.toml en las ubicaciones esperadas:")
        for path in possible_paths:
            print(f"   ‚Ä¢ {path}")
        print("\nüí° Crea el archivo secrets.toml con la configuraci√≥n correcta")
        sys.exit(1)
    
    print(f"üìÇ Usando: {secrets_file}")
    
    # Ejecutar verificaci√≥n
    success = test_google_drive_connection(secrets_file)
    
    if not success:
        fix_common_issues()
        sys.exit(1)

if __name__ == "__main__":
    main()